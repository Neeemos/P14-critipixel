name: Symfony CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo_pgsql
          tools: symfony, composer
          coverage: none

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress
      - name: Build Sass css
        run: symfony console sass:build

      - name: Generate random .env.test file
        run: |
          DB_NAME="testdb_$RANDOM"
          APP_SECRET="$(openssl rand -hex 16)"
          
          echo "KERNEL_CLASS='App\\Kernel'" > .env.test
          echo "APP_SECRET=$APP_SECRET" >> .env.test
          echo "SYMFONY_DEPRECATIONS_HELPER=999999" >> .env.test
          echo "PANTHER_APP_ENV=panther" >> .env.test
          echo "PANTHER_ERROR_SCREENSHOT_DIR=./var/error-screenshots" >> .env.test
          echo "DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/$DB_NAME" >> .env.test

          echo "Creating PostgreSQL test database: $DB_NAME"
          export PGPASSWORD=${{ secrets.DB_PASSWORD }}
          psql -h localhost -U ${{ secrets.DB_USER }} -c "CREATE DATABASE \"$DB_NAME\";"
        env:
          PGPASSWORD: symfony

      - name: Run tests
        run: composer run test

      - name: Run PHPStan static analysis
        run: php vendor/bin/phpstan analyse -l 6 src tests
