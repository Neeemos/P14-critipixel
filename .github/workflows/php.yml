name: Symfony CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # Service PostgreSQL avec identifiants temporaires (non sensibles)
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ci_temp_user
          POSTGRES_PASSWORD: ci_temp_password
          POSTGRES_DB: temp_db
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo_pgsql
          tools: symfony, composer
          coverage: none

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress
      
      - name: Build Sass css
        run: symfony console sass:build

      - name: Setup PostgreSQL with real credentials
        run: |
          # Créer le vrai utilisateur et mot de passe à partir des secrets
          export REAL_DB_USER="${{ secrets.DB_USER }}"
          export REAL_DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          
          # Créer une base de données temporaire pour les tests
          DB_NAME="testdb_$RANDOM"
          
          # Utiliser l'utilisateur temporaire pour créer le vrai utilisateur
          export PGPASSWORD='ci_temp_password'
          psql -h localhost -U ci_temp_user -d temp_db -c "CREATE USER \"$REAL_DB_USER\" WITH PASSWORD '$REAL_DB_PASSWORD';"
          psql -h localhost -U ci_temp_user -d temp_db -c "CREATE DATABASE \"$DB_NAME\" WITH OWNER \"$REAL_DB_USER\";"
          psql -h localhost -U ci_temp_user -d temp_db -c "GRANT ALL PRIVILEGES ON DATABASE \"$DB_NAME\" TO \"$REAL_DB_USER\";"
          
          # Sauvegarder le nom de la base de données
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV

      - name: Generate random .env.test file
        run: |
          APP_SECRET="$(openssl rand -hex 16)"
          
          echo "KERNEL_CLASS='App\\Kernel'" > .env.test
          echo "APP_SECRET=$APP_SECRET" >> .env.test
          echo "SYMFONY_DEPRECATIONS_HELPER=999999" >> .env.test
          echo "PANTHER_APP_ENV=panther" >> .env.test
          echo "PANTHER_ERROR_SCREENSHOT_DIR=./var/error-screenshots" >> .env.test
          echo "DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ env.DB_NAME }}?serverVersion=15" >> .env.test

      - name: Run tests
        run: composer run test

      - name: Run PHPStan static analysis
        run: php vendor/bin/phpstan analyse -l 6 src tests